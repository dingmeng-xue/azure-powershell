// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Commands.WebApps.Helper.PrivateDns
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PrivateZones.
    /// </summary>
    public static partial class PrivateZonesExtensions
    {
            /// <summary>
            /// Creates or updates a Private DNS zone. Does not modify Links to virtual
            /// networks or DNS records within the zone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='privateZoneName'>
            /// The name of the Private DNS zone (without a terminating dot).
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the CreateOrUpdate operation.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the Private DNS zone. Omit this value to always overwrite the
            /// current zone. Specify the last-seen ETag value to prevent accidentally
            /// overwriting any concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new Private DNS zone to be created, but to prevent
            /// updating an existing zone. Other values will be ignored.
            /// </param>
            public static PrivateZone CreateOrUpdate(this IPrivateZones operations, string resourceGroupName, string privateZoneName, PrivateZone parameters, string ifMatch = default(string), string ifNoneMatch = default(string))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, privateZoneName, parameters, ifMatch, ifNoneMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a Private DNS zone. Does not modify Links to virtual
            /// networks or DNS records within the zone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='privateZoneName'>
            /// The name of the Private DNS zone (without a terminating dot).
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the CreateOrUpdate operation.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the Private DNS zone. Omit this value to always overwrite the
            /// current zone. Specify the last-seen ETag value to prevent accidentally
            /// overwriting any concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new Private DNS zone to be created, but to prevent
            /// updating an existing zone. Other values will be ignored.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PrivateZone> CreateOrUpdateAsync(this IPrivateZones operations, string resourceGroupName, string privateZoneName, PrivateZone parameters, string ifMatch = default(string), string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, privateZoneName, parameters, ifMatch, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
